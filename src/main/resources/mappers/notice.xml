<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace속성:매퍼파일의 완전한경로 .xml는 생략 -->
<!--※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. --> 
<!-- 
	[쿼리문 작성법]
	A. 값에 해당하는 부분은 #{변수}
	B. 객체에 해당하는 부분은 ${변수} 객체은 테이블명 혹은 컬럼명등을 의미
	C. #{변수} 작성시 parameterType이 Map인 경우는 키값을
	     자바빈(DTO계열)인 경우는 자바빈의 속성명(멤버변수명) 이어야 한다
	     단,parameterType이 int나 String인 경우는 임의값을 줘도 무방
	D. 쿼리문안에  >,>= ,<,<=등의 비교 연산자를 사용하는 경우 에러
	  	1. <![CDATA[     ]]> CDATA섹션을 사용하거나
	  		예] 
	  		SELECT * FROM emp
	  		<![CDATA[ 
	  		WHERE sal >= 3000
	  		]]>
	  		CDATA섹션의 문자열은 단순 텍스트로 처리한다
	  	2. 특수문자를 사용한다 즉 >은 &gt; < 은 &lt;
	  	   예]
	  	  SELECT * FROM emp
	  	  WHERE sal &gt;= 3000
	 -->

<mapper namespace="mappers.notice">

	<!--resultMap사용시 column속성 필수:ibatis와 다른점  -->
	<!-- 레코드를 조회하는 모든 select태그에서 사용할 수 있다 
		 상세보기에 적용:글번호에 따른 모든 한줄 댓글도 가져오기위해 collection태그 사용
		 type:DTO계열 즉 SELECT한 쿼리 결과를 담을 자바빈 객체
		 id: select 요소의 resultMap속성에 설정해줄 식별자    
	 -->
	 <!--
	 <resultMap type="memoDto" id="memoDtoResult">
	 	 
		property:자바빈(OneMemoDTO)의 속성명
		column:테이블의 컬럼(조회(SELECT)결과의 컬럼명들 의미)
		 -->
		 <!--  
	 	<result property="no" column="no"/>
	 	<result property="title" column="title"/>
	 	<result property="content" column="content"/>
	 	<result property="postDate" column="postDate"/>
	 	<result property="id" column="id"/>
	 	<result property="name" column="name"/>
	 	<result property="commentCount" column="commentCount"/>
	 	-->
	 	<!-- 
		1:N관계 매핑용
		column: 조인조건의 컬럼명 (ON onememo.no = linecomments.no)
		select: select태그의 id 속성값(쿼리문은 조인문)
		javaType : OneMemoDTO의 자식레코드(LineCommentDTO)를 담을 컬렉션 타입
		ofType : 자식의 DTO타입
		property: 댓글 목록을 담을 OneMemoDTO속성명
		
		
		아래 collection태그 사용시 
		현재 매퍼파일에서 메모글 하나 가져올때 반드시 resultMap="memoDtoResult"을 사용하지
		 
	 	
	 	<collection property="comments" column="no" select="onememo.mybatis.mapper.linecomments.commentListsByNo" javaType="List" ofType="commentDto"/>
	 </resultMap>
	-->
	
	<!-- 아이디 및 패스워드가 일치하는 회원 조회 -->
	<select id="memoFindMemberByIdAndPwd" parameterType="Map" resultType="int" >
		SELECT COUNT(*) FROM members WHERE m_id=#{m_id} AND m_password=#{m_password}
	</select>
	
	<!-- 공지사항 댓글 조회(구현예정) 
	<select id="memoFindAll" parameterType="Map" resultType="memoDto">
		SELECT * FROM (SELECT T.*,ROWNUM R FROM (SELECT o.*,name,(SELECT COUNT(*) FROM linecomments WHERE no=o.no) commentCount
		FROM onememo o JOIN member m ON o.id=m.id
		
		<if test="searchColumn != null">
		WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'		
		</if>
		
		ORDER BY no DESC) T)
		WHERE R BETWEEN #{start} AND #{end}		 
	</select>-->
	
	<!-- 아이디 별 글 등록 수 조회 -->
	<select id="memoTotalRecordCount" parameterType="Map" resultType="int">
		SELECT COUNT(*) FROM notice n JOIN members m ON m.id=n.id
		<if test="searchColumn != null">
		WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'		
		</if>				
	</select>
	
	<!-- 공지사항 글 등록 -->
	<insert id="memoSave" parameterType="Map"  >
		INSERT INTO notice VALUES(SEQ_NOTICE.NEXTVAL,#{n_title},#{n_content},DEFAULT,#{m_id})
	</insert>
	
	<!-- 글 번호로 공지사항 글 조회 -->
	<select id="memoFindRecordByNo" parameterType="Map" resultMap="memoDtoResult">
		SELECT o.*, m_name 
		FROM notice n JOIN members m ON n.id=m.id
		WHERE n_no=#{n_no}
	</select>
	
	<!-- 공지사항 글 삭제 -->
	<delete id="memoDelete" parameterType="Map">
		DELETE notice WHERE n_no=#{n_no}
	</delete>
	
	<!-- 공지사항 글 수정 -->
	<update id="memoUpdate" parameterType="Map">
		UPDATE notice SET n_title=#{n_title}, n_content=#{n_content} WHERE n_no=#{n_no}
	</update> 
	
	<!-- 스프링 씨큐리티 회원 입력용 -->
	<insert id="saveUser" parameterType="Map">
		INSERT INTO users VALUES(#{id},#{pass},#{name},DEFAULT,'ROLE_ADMIN')	
	</insert>
</mapper>